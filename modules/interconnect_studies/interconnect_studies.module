<?php

$path_m_studies = drupal_get_path('module','mica_studies');
require_once($path_m_studies . '/mica_studies.module');
require_once($path_m_studies . '/mica_studies.population.inc');
require_once($path_m_studies . '/mica_studies.blocks.inc');

$path_i_studies = drupal_get_path('module','interconnect_studies');
require_once($path_i_studies . '/interconnect_studies.features.inc');


function interconnect_studies_views_default_views_alter(&$views) {
// Override the standard Mica fields for the study list page
	// if (isset($views['studies_search'])) {
		// $views['studies_search']->display['page_1']->display_options['header']['area']['content'] = 'The following studies are available';
		// $fields_temp = array();
		// $fields_temp['field_acroym'] = $views['studies_search']->display['default']->display_options['fields']['field_acroym'];
		// $fields_temp['title_field'] = $views['studies_search']->display['default']->display_options['fields']['title_field'];
		// $fields_temp['field_design_other_ic'] = $views['studies_search']->display['default']->display_options['fields']['field_design_other_sp'];
		// $fields_temp['field_design_other_ic']['id'] = 'field_design_other_ic';
		// $fields_temp['field_design_other_ic']['field'] = 'field_design_other_ic';
		// $fields_temp['field_design_other_ic']['alter']['text'] = ' ([field_design_other_ic])';
		// $fields_temp['field_design_ic'] = $views['studies_search']->display['default']->display_options['fields']['field_design'];
		// $fields_temp['field_design_ic']['id'] = 'field_design_ic';
		// $fields_temp['field_design_ic']['field'] = 'field_design_ic';
		// $fields_temp['field_design_ic']['alter']['text'] = '[field_design_ic][field_design_other_ic]';
		// $fields_temp['field_target_number_participants'] = $views['studies_search']->display['default']->display_options['fields']['field_target_number_participants'];
		// $fields_temp['field_study_populations_field_pop_country'] = $views['studies_search']->display['default']->display_options['fields']['field_study_populations_field_pop_country'];
		// unset($views['studies_search']->display['default']->display_options['fields']);
		// $views['studies_search']->display['default']->display_options['fields'] = $fields_temp;
	// }
	dpm($views);
}

/**
 * Implements hook_form_alter
 * To add dependent fields when filling out the form
 */
 
function interconnect_studies_form_alter(&$form, &$form_state, $form_id) {

   drupal_add_css(drupal_get_path('module', 'interconnect_studies') . '/css/custom_form.css', array('group' => CSS_THEME, 'every_page' => TRUE, 'weight' => 1000));

  	 
  switch ($form_id) {
    case 'study_node_form':
		interconnect_studies_study_form_alter($form, $form_state, $form_id);
	break;
    case 'population_node_form':
      interconnect_studies_population_form_alter($form, $form_state, $form_id);
    break;
    case 'data_collection_event_node_form':
      interconnect_studies_data_collection_event_form_alter($form, $form_state, $form_id);
    break;
	case 'contact_node_form':
      	$form['actions']['preview']['#type']='hidden';
    break;
  }

}

function interconnect_studies_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  $links = array();

  switch ($root_path) {

    case 'node/%':
      $node = $router_item['map']['1'];
      switch ($node->type) {
        case 'study':
          if (node_access('update', $node)) {
            if (node_access('create', 'population')) {
              $links['add-population'] = array(
                '#theme' => 'menu_local_action',
                '#weight' => -30,
                '#link' => array(
                  'title' => t('Add new Sampling Frame'),
                  'href' => 'node/add/population',
                  'localized_options' => array(
                    'query' => array(
                      'study' => $node->nid,
                      'destination' => 'node/' . $node->nid,
                    )
                  ),
                ),
              );
            }
			//switch off Add Datasets
            if (node_access('create', 'data_collection_event')) {
				unset($data['actions']['output']['add-data-collection-event']);
            }
          }
          // If study has has variables
          if (_mica_studies_has_variables($node->nid)) {
            // variables
            $links['view-variable'] = array(
              '#weight' => 30,
              '#theme' => 'menu_local_action',
              '#link' => array(
                'title' => t('Variables'),
                'href' => 'variable-search',
                'localized_options' => array(
                  'query' => array(
                    'f[0]' => 'search_api_combined_1:' . $node->nid
                  ),
                  'attributes' => array(
                    'class' => 'highlight',
                  ),
                ),
              ),
            );
          }
		  
          break;
        case 'population':
          $wraper = entity_metadata_wrapper('node', $node);
          $wrapper_id = $wraper->field_pop_study;
          if (node_access('create', 'data_collection_event')) {
            unset($data['actions']['output']['add-data-collection-event']);
          }
          break;
      }
      break;

    case 'studies':

      $node_type = node_type_load('study');
      if (node_access('create', 'study')) {
        $links['add-study'] = array(
          '#theme' => 'menu_local_action',
          '#link' => array(
            'title' => t('Add new Study'),
            'href' => 'node/add/study',
          ),
        );

      }
      $links['search-studies'] = array(
        '#weight' => 30,
        '#theme' => 'menu_local_action',
        '#link' => array(
          'title' => t('Search Studies'),
          'href' => 'studies-search',
          'localized_options' => array(
            'attributes' => array(
              'class' => 'highlight',
            ),
          ),
        ),
      );
      break;

    case 'documents':
      if (node_access('create', 'documents')) {
        $links['add-documents'] = array(
          '#theme' => 'menu_local_action',
          '#link' => array(
            'title' => t('Add some Documents'),
            'href' => 'node/add/documents',
          ),
        );
      }
      break;
  }

	//switch off Edit Datasets
	if (isset($data['actions']['output']['0'])){
		if ($data['actions']['output']['0']['#link']['title'] == 'Edit Datasets') {
			unset($data['actions']['output']['0']);
		}
	}
	
  $data['actions']['output'] = array_merge($data['actions']['output'], $links);

}



function interconnect_studies_study_form_alter(&$form, &$form_state, $form_id) {
	

	$form['#validate'][] = '_interconnect_studies_validate';
	
	$form['actions']['_mica_studies_save_add_population_submit'] = array(
		'#access' => TRUE,
		'#value' => t('Save & Add Sampling Frame'),
		'#weight' => 6,
		'#type' => 'hidden',
		//'#type' => 'submit',
		'#submit' => array('node_form_submit', '_mica_studies_save_add_population_submit'),
	);
  
	// Override save button
	$form['actions']['_interconnect_studies_save_study_submit'] = array(
		'#access' => TRUE,
		'#value' => t('Save'),
		'#weight' => -10,
		'#type' => 'submit',
		'#submit' => array('node_form_submit', '_interconnect_studies_save_study_submit'),
	);
	
	$form['actions']['submit']['#type']='hidden';
	$form['actions']['preview']['#type']='hidden';
  
	//Hide unused groups
	
	$form['#groups']['group_access']->format_type = 'hidden';
	$form['#groups']['group_authorization_maelstrom']->format_type = 'hidden';
	$form['#groups']['group_authorization_specific']->format_type = 'hidden';
	$form['#groups']['group_authorization']->format_type = 'hidden';
	$form['#groups']['group_datasets']->format_type = 'hidden';
	$form['#groups']['group_documents']->format_type = 'hidden';
	$form['#groups']['group_supp_info']->format_type = 'hidden';
	$form['#groups']['group_target_nb_samples']->format_type = 'hidden';

	//Hide unused fields
	 
	$form['body']['#type'] = 'hidden';
	$form['field_access_biosamples']['#type'] = 'hidden';
	$form['field_access_data']['#type'] = 'hidden';
	$form['field_access_other']['#type'] = 'hidden';
	$form['field_access_other_sp']['#type'] = 'hidden';
	$form['field_address']['#type'] = 'hidden';
	$form['field_authorising_date']['#type'] = 'hidden';
	$form['field_authorising_date_m']['#type'] = 'hidden';
	$form['field_authorising_person_name']['#type'] = 'hidden';
	$form['field_authorising_person_name_m']['#type'] = 'hidden';
	$form['field_authorization_maelstrom']['#type'] = 'hidden';
	$form['field_authorization_specific']['#type'] = 'hidden';
	$form['field_city']['#type'] = 'hidden';
	$form['field_contact_country']['#type'] = 'hidden';
	$form['field_contact_email']['#type'] = 'hidden';
	$form['field_contact_name']['#type'] = 'hidden';
	$form['field_department_unit']['#type'] = 'hidden';
	$form['field_design']['#type'] = 'hidden';
	$form['field_design_other_sp']['#type'] = 'hidden';
	$form['field_documents']['#type'] = 'hidden';
	$form['field_files']['#type'] = 'hidden';
	$form['field_info_design_follow_up']['#type'] = 'hidden';
	$form['field_institution_name']['#type'] = 'hidden';
	$form['field_investigators']['#type'] = 'hidden';
	$form['field_logo']['#type'] = 'hidden';
	$form['field_no_limits_samples']['#type'] = 'hidden';
	$form['field_postal_code']['#type'] = 'hidden';
	$form['field_recruitment']['#type'] = 'hidden';
	$form['field_recruitment_other_sp']['#type'] = 'hidden';
	$form['field_recruitment_supp_info']['#type'] = 'hidden';
	$form['field_state']['#type'] = 'hidden';
	$form['field_study_end_year']['#type'] = 'hidden';
	$form['field_study_start_year']['#type'] = 'hidden';
	$form['field_study_study_variable_att']['#type'] = 'hidden';
	$form['field_supp_infos']['#type'] = 'hidden';
	$form['field_target_nb_supp_info']['#type'] = 'hidden';
	$form['field_target_number_biosamples']['#type'] = 'hidden';
	$form['field_telephone']['#type'] = 'hidden';
	$form['mica_dataset']['#type'] = 'hidden';
	$form['mica_opal']['#type'] = 'hidden';
	$form['field_dummy_ic']['#type'] = 'hidden';
	
	// To stop populations being created before the study is saved
	
	if ($form['nid']['#value'])
		{
			$form['#groups']['group_sample_pop_ic']->format_settings['instance_settings']['description'] = 'All studies represent
				a sample from a larger population. Some studies will have multiple samples. 
				Please add sampling frames below by clicking the Create Population button. 
				You can add more sampling frames if needed. Existing sampling frames can be changed 
				by clicking the Edit button.';
			$form['field_study_populations']['#type'] = 'container';
		}
	else {
		$form['field_study_populations']['#type'] = 'hidden';
			$form['#groups']['group_sample_pop_ic']->format_settings['instance_settings']['description'] = 'All studies represent
				a sample from a larger population. Some studies will have multiple samples. 
				To add sampling frames, you will first need to save your study.';
	}

	// hide some field labels to improve formatting
	$language=$form['field_marker_paper']['#language'];
	$form['field_marker_paper'][$language]['0']['value']['#title_display'] = 'invisible';
	$language=$form['field_pubmedid']['#language'];
	$form['field_pubmedid'][$language]['0']['value']['#title_display'] = 'invisible';
	$language=$form['field_design_ic']['#language'];
	$form['field_design_ic'][$language]['0']['value']['#title_display'] = 'invisible';
	$form['field_design_ic'][$language]['0']['#title_display'] = 'invisible';
	$form['field_design_ic'][$language]['#title_display'] = 'invisible';
	//need to reinstate * for study design
	$form['#groups']['group_study_design']->label = 'Study Design *';
	$language=$form['field_target_number_participants']['#language'];
	$form['field_target_number_participants'][$language]['0']['value']['#title_display'] = 'invisible';
	$language=$form['field_number_of_participants_ic']['#language'];
	$form['field_number_of_participants_ic'][$language]['0']['value']['#title_display'] = 'invisible';
	$language=$form['field_eth_his_lat_ic']['#language'];
	$form['field_eth_his_lat_ic'][$language]['0']['value']['#title_display'] = 'invisible';
	$language=$form['field_health_info_ic']['#language'];
	$form['field_health_info_ic'][$language]['0']['value']['#title_display'] = 'invisible';
	$form['field_health_info_ic'][$language]['0']['#title_display'] = 'invisible';
	$form['field_health_info_ic'][$language]['#title_display'] = 'invisible';

	// move help text for existing Maelstrom fields using form element layout module
	$language=$form['title_field']['#language'];
	$form['title_field'][$language]['0']['#description_display'] = 'before';
	$form['title_field'][$language]['0']['value']['#description_display'] = 'before';
	$form['title_field'][$language]['#description_display'] = 'before';

	$language=$form['field_acroym']['#language'];
	$form['field_acroym'][$language]['0']['#description_display'] = 'before';
	$form['field_acroym'][$language]['0']['value']['#description_display'] = 'before';
	$form['field_acroym'][$language]['#description_display'] = 'before';

	$language=$form['field_contacts_ref']['#language'];	
	$form['field_contacts_ref'][$language]['0']['#description_display'] = 'before';
	$form['field_contacts_ref'][$language]['0']['value']['#description_display'] = 'before';
	$form['field_contacts_ref'][$language]['#description_display'] = 'before';

	$language=$form['field_marker_paper']['#language'];	
	$form['field_marker_paper'][$language]['0']['#description_display'] = 'before';
	$form['field_marker_paper'][$language]['0']['value']['#description_display'] = 'before';
	$form['field_marker_paper'][$language]['#description_display'] = 'before';

	$language=$form['field_pubmedid']['#language'];		
	$form['field_pubmedid'][$language]['0']['#description_display'] = 'before';
	$form['field_pubmedid'][$language]['0']['value']['#description_display'] = 'before';
	$form['field_pubmedid'][$language]['#description_display'] = 'before';

	$language=$form['field_website']['#language'];		
	$form['field_website'][$language]['0']['#description_display'] = 'before';
	$form['field_website'][$language]['0']['value']['#description_display'] = 'before';
	$form['field_website'][$language]['#description_display'] = 'before';

	$language=$form['field_target_number_participants']['#language'];			
	$form['field_target_number_participants'][$language]['0']['#description_display'] = 'before';
	$form['field_target_number_participants'][$language]['0']['value']['#description_display'] = 'before';
	$form['field_target_number_participants'][$language]['#description_display'] = 'before';
	
	$language=$form['field_number_of_participants_ic']['#language'];			
	$form['field_number_of_participants_ic'][$language]['0']['#description_display'] = 'before';
	$form['field_number_of_participants_ic'][$language]['0']['value']['#description_display'] = 'before';
	$form['field_number_of_participants_ic'][$language]['#description_display'] = 'before';
	
	$language=$form['field_eth_his_lat_ic']['#language'];			
	$form['field_eth_his_lat_ic'][$language]['0']['#description_display'] = 'before';
	$form['field_eth_his_lat_ic'][$language]['0']['value']['#description_display'] = 'before';
	$form['field_eth_his_lat_ic'][$language]['#description_display'] = 'before';

	// fixing N/A ordering

	$language=$form['field_family_ic']['#language'];
	unset($form['field_family_ic'][$language]['#options']['_none']);
	$form['field_family_ic'][$language]['#options']['_none'] = 'N/A';
	$language=$form['field_measure_diet_ic']['#language'];
	unset($form['field_measure_diet_ic'][$language]['#options']['_none']);
	$form['field_measure_diet_ic'][$language]['#options']['_none'] = 'N/A';
	$language=$form['field_measure_pa_ic']['#language'];  
	unset($form['field_measure_pa_ic'][$language]['#options']['_none']);
	$form['field_measure_pa_ic'][$language]['#options']['_none'] = 'N/A'; 
	$language=$form['field_dna_ic']['#language'];  
	unset($form['field_dna_ic'][$language]['#options']['_none']);
	$form['field_dna_ic'][$language]['#options']['_none'] = 'N/A';
	$language=$form['field_recruit_cont_ic']['#language'];  
	krsort($form['field_recruit_cont_ic'][$language]['#options']); //rearrange array
  
	//set up dependent fields for study design
	   
	// clinical trial only   
   
	_mica_add_dependent_field_checked($form, 'field_design_ic', 'field_interv_type_ic', 'clinical_trial');
	_mica_add_double_dependent_field_checked($form, 'field_design_ic', 'field_interv_type_ic', 'field_interv_other_ic', 'clinical_trial', 'other');
	_mica_add_dependent_field_checked($form, 'field_design_ic', 'field_trial_number_ic', 'clinical_trial');   

	// case control only

	_mica_add_double_or_field_checked($form, 'field_design_ic', 'field_design_ic', 'field_case_definition_ic', 'case_control', 'case_only');

	//to do nested logic 
    $lang = $form['field_other_case_ic']['#language'];
	$thing1 = '\':input[name="field_design_ic[' . $lang . ']"]\'';
	$thing2 = '\':input[name="field_case_definition_ic[' . $lang . ']"]\'';
    $form['field_other_case_ic']['#states'] = array(
		'visible' => array(
			array(
				':input[name="field_design_ic['.$lang.']"]' => array(
					array('value' => 'case_control'),
					array('value' => 'case_only'),
				),
			),
			':input[name="field_case_definition_ic['.$lang.']"]' => array('value' => 'other')
		)
	);
  
	// other study design

   _mica_add_dependent_field_checked($form, 'field_design_ic', 'field_design_other_ic', 'other'); 

	// recruitment date
	
	_mica_add_dependent_field_checked($form, 'field_recruit_cont_ic', 'field_recruit_end_ic', '0');
    
	// family field

	_mica_add_dependent_field_checked($form, 'field_family_ic', 'field_family_other_ic', 'other');

	// Health outcomes

	_mica_add_double_or_field_checked($form, 'field_health_info_ic', 'field_health_info_ic', 'field_hi_other_diabetes_ic', 'OD_p', 'OD_i');

	
	// bespoke filled state for race group other text
	$lang = $form['field_race_other_text_ic']['#language'];
	$form['field_race_other_text_ic']['#states']['visible'] = array(
        ':input[name="field_race_other_ic['.$lang.'][0][value]"]' => array('filled' => TRUE),
	);
	
	// bespoke filled state for actual number of participants
	$lang = $form['field_participants_date_ic']['#language'];
	$form['field_participants_date_ic']['#states']['visible'] = array(
        ':input[name="field_number_of_participants_ic['.$lang.'][0][value]"]' => array('filled' => TRUE),
	);
	
	//genotyping dependencies
	
	dependency_setup('field_eth_his_lat_ic','field_genotype_his_lat_ic','field_his_lat_mds_plots_ic',$form);	
	dependency_setup('field_race_african_ic','field_genotype_african_ic','field_african_mds_plots_ic',$form);
	dependency_setup('field_race_e_asian_ic','field_genotype_east_asian_ic','field_e_asian_mds_plots_ic',$form);
	dependency_setup('field_race_s_asian_ic','field_genotype_south_asian_ic','field_s_asian_mds_plots_ic',$form);
	dependency_setup('field_race_euro_ic','field_genotype_euro_ic','field_euro_mds_plots_ic',$form);
	dependency_setup('field_race_indig_am_ic','field_genotype_indig_am_ic','field_indig_am_mds_plots_ic',$form);
	dependency_setup('field_race_indig_aus_ic','field_genotype_indig_aus_ic','field_indig_aus_mds_plots_ic',$form);
	dependency_setup('field_race_indig_pac_ic','field_genotype_indig_pac_ic','field_indig_pac_mds_plots_ic',$form);
	dependency_setup('field_race_mid_e_ic','field_genotype_mid_e_ic','field_mid_e_mds_plots_ic',$form);
	dependency_setup('field_race_other_ic','field_genotype_other_ic','field_other_mds_plots_ic',$form);
	
	// add a callback to a function that disables the text input for populations
	$lang = $form['field_study_populations']['#language'];
	$form['field_study_populations'][$lang]['#after_build'] = array('field_form_element_after_build','field_study_populations_after_build');
}

//function to assist with stopping users entering something in the populations field

function field_study_populations_after_build($form, &$form_state) {
	foreach($form as $k => $v) {
		if (is_numeric($k)){
			$form[$k]['nid']['#attributes']['readonly'] = TRUE;
			}	

		}
    return $form;	
}

//function to set up genotyping dependencies

function dependency_setup($race_name,$genotype_name,$mds_name,&$form){
	
	$lang = $form[$race_name]['#language'];
	$form[$genotype_name]['#states']['visible'] = array(
        ':input[name="'.$race_name.'['.$lang.'][0][value]"]' => array('filled' => TRUE),
	);
	$form[$mds_name]['#states']['visible'] = array(
        ':input[name="'.$race_name.'['.$lang.'][0][value]"]' => array('filled' => TRUE),
	);	
	$lang = $form[$genotype_name]['#language'];
	$form[$genotype_name][$lang]['#after_build'] = array('field_genotype_after_build','field_form_element_after_build');
	
}

// functions to run after page built to add the states to new field collections by iterating over them

 function field_genotype_after_build($form, &$form_state) {
    foreach($form as $k => $v) {
        if(isset($v['#entity_type']) && $v['#entity_type']=='field_collection_item') {
			$my_name = $form[$k]['#field_name'];
			$lang = $form[$k]['field_genotyping_platform']['#language'];
			$form[$k]['field_other_platforms']['#states'] = array(
                'visible' => array(
                    ':input[name="'.$my_name.'['.$lang.']['.$k.'][field_genotyping_platform]['.$lang.']"]' => array('value' => '999'),
                ),
            );
			$lang = $form[$k]['field_imputation_panel']['#language'];
			$form[$k]['field_other_imputation_panel']['#states'] = array(
                'visible' => array(
                    ':input[name="'.$my_name.'['.$lang.']['.$k.'][field_imputation_panel]['.$lang.']"]' => array('value' => '999'),
                ),
            );
			$form[$k]['field_release_date']['#states'] = array(
                'visible' => array(
                    ':input[name="'.$my_name.'['.$lang.']['.$k.'][field_imputation_panel]['.$lang.']"]' => array('value' => '999'),
                ),
            );
			$lang = $form[$k]['field_reference_population']['#language'];
			$form[$k]['field_other_reference_population']['#states'] = array(
                'visible' => array(
                    ':input[name="'.$my_name.'['.$lang.']['.$k.'][field_reference_population]['.$lang.']"]' => array('value' => '999'),
                ),
            );
        }
    }
     return $form;
 }

 function field_genotyping_arrays_ic_after_build($form, &$form_state) {

    foreach($form as $k => $v) {
        if(isset($v['#entity_type']) && $v['#entity_type']=='field_collection_item') {
			$my_name = $form[$k]['#field_name'];
			$lang = $form[$k]['field_other_arrays_ic']['#language'];
			$form[$k]['field_other_arrays_ic']['#states'] = array(
                'visible' => array(
                    ':input[name="'.$my_name.'['.$lang.']['.$k.'][field_list_of_arrays_ic]['.$lang.']"]' => array('value' => '999'),
                ),
            );
        }
    }
     return $form;
 }

  function field_hapmap_ref_panel_ic_after_build($form, &$form_state) {

    foreach($form as $k => $v) {
        if(isset($v['#entity_type']) && $v['#entity_type']=='field_collection_item') {
			$my_name = $form[$k]['#field_name'];
			$lang = $form[$k]['field_other_hapmap_ref_pan_ic']['#language'];
			$form[$k]['field_other_hapmap_ref_pan_ic']['#states'] = array(
                'visible' => array(
                    ':input[name="'.$my_name.'['.$lang.']['.$k.'][field_hapmap_ref_panels_ic]['.$lang.']"]' => array('value' => '999'),
                ),
            );
        }
    }
     return $form;
 }
  function field_1000_genomes_ref_pan_ic_after_build($form, &$form_state) {

    foreach($form as $k => $v) {
        if(isset($v['#entity_type']) && $v['#entity_type']=='field_collection_item') {
			$my_name = $form[$k]['#field_name'];
			$lang = $form[$k]['field_other_1000genomes_pan_ic']['#language'];
			$form[$k]['field_other_1000genomes_pan_ic']['#states'] = array(
                'visible' => array(
                    ':input[name="'.$my_name.'['.$lang.']['.$k.'][field_1000genomes_ref_panels_ic]['.$lang.']"]' => array('value' => '999'),
                ),
            );
        }
    }
     return $form;
 }
 


function interconnect_studies_population_form_alter(&$form, &$form_state, $form_id) {

	// Count the number of populations that exist for a study and add one for this new population
	// to generate a name Sampling Frame X automatically
	if(isset($_REQUEST['study'])){
		$nid = $_REQUEST['study'];
		$count_pops = 0;
		$result = db_query('SELECT field_study_populations_nid from field_data_field_study_populations WHERE entity_id = :nid', array(':nid' => $nid));
		
		foreach ($result as $record) {
			$count_pops++;
		}
		
		$number_pops = $count_pops + 1;

		$lang = $form['field_pop_selection_others_sp']['#language'];
		$form['title_field'][$lang][0]['value']['#default_value'] = "Sampling Frame " . $number_pops;
	}
		
	$form['acustomtext'] = array(
		'#type' => 'item',
		'#markup' => '<div >  All studies represent a sample from a larger population.
		Some studies will have multiple samples. Please complete the following questions for each separate sample.
		</div>',
		'#weight' => -10,
	);
	
	// hide old fields
	//$form['title_field']['#type'] = 'hidden';
	$form['body']['#type'] = 'hidden';
	$form['field_pop_dce']['#type'] = 'hidden';
	$form['field_pop_ethnic_origin']['#type'] = 'hidden';
	$form['field_pop_exist_study_part']['#type'] = 'hidden';
	$form['field_pop_gender']['#type'] = 'hidden';
	$form['field_pop_general_pop_recruit']['#type'] = 'hidden';
	$form['field_pop_no_lim_participants_s']['#type'] = 'hidden';
	$form['field_pop_no_limits_participants']['#type'] = 'hidden';
	$form['field_pop_partcipant_sel_supp_in']['#type'] = 'hidden';
	$form['field_pop_participants_nb']['#type'] = 'hidden';
	$form['field_pop_participants_nb_s']['#type'] = 'hidden';
	$form['field_pop_participants_nb_supp_i']['#type'] = 'hidden';
	$form['field_pop_recruit_supp_info']['#type'] = 'hidden';
	$form['field_pop_select_criteria']['#type'] = 'hidden';
	$form['field_pop_study']['#type'] = 'hidden';
	$form['field_pop_supp_infos']['#type'] = 'hidden';
	$form['field_pop_territory']['#type'] = 'hidden';

	//hide groups
	$form['#groups']['group_general_info']->format_type = 'hidden';
	$form['#groups']['group_pop_participants_number']->format_type = 'hidden';
	$form['#groups']['group_pop_supp_info']->format_type = 'hidden';	
	
	//override large text boxes
	$lang = $form['field_pop_selection_others_sp']['#language'];
	$form['field_pop_selection_others_sp'][$lang][0]["#format"] = 'plain_text';
	$form['field_pop_selection_others_sp']['#after_build'][] = 'remove_text_format';
	//$form['field_pop_selection_others_sp'][$lang][0]['value']['#rows'] = 1;
	// $form['field_pop_selection_others_sp'][$lang][0]['#type'] = 'textfield';
	$lang = $form['field_pop_specific_pop_other_sp']['#language'];	
	$form['field_pop_specific_pop_other_sp'][$lang][0]["#format"]= 'plain_text';
	$form['field_pop_specific_pop_other_sp']['#after_build'][] = 'remove_text_format';
	//$form['field_pop_specific_pop_other_sp'][$lang][0]['value']['#rows'] = 1;
	// $form['field_pop_specific_pop_other_sp'][$lang][0]['#type'] = 'textfield';
	$lang = $form['field_pop_recruitment_other']['#language'];	
	$form['field_pop_recruitment_other'][$lang][0]["#format"]= 'plain_text';
	$form['field_pop_recruitment_other']['#after_build'][] = 'remove_text_format';
	//$form['field_pop_recruitment_other'][$lang][0]['value']['#rows'] = 1;
	// $form['field_pop_recruitment_other'][$lang][0]['#type'] = 'textfield';
	
	//set the title
	
	if ($form_id == 'population_node_form') {
	
	   if ($form['nid']['#value'] != '') {
        drupal_set_title(t("Edit Population from which the sample(s) is drawn"));
      }
      else {
        drupal_set_title(t("Create Population from which the sample(s) is drawn"));
      }
     }

	// move help text for existing Maelstrom fields
	$language = $form['field_pop_country']['#language'];
	$form['field_pop_country'][$language]['0']['#description_display'] = 'before';
	$form['field_pop_country'][$language]['0']['value']['#description_display'] = 'before';
	$form['field_pop_country'][$language]['#description_display'] = 'before';

	$language = $form['field_pop_health_status']['#language'];	
	$form['field_pop_health_status'][$language]['0']['#description_display'] = 'before';
	$form['field_pop_health_status'][$language]['0']['value']['#description_display'] = 'before';
	$form['field_pop_health_status'][$language]['#description_display'] = 'before';

	$language = $form['field_pop_src_recruit']['#language'];	
	$form['field_pop_src_recruit'][$language]['0']['#description_display'] = 'before';
	$form['field_pop_src_recruit'][$language]['0']['value']['#description_display'] = 'before';
	$form['field_pop_src_recruit'][$language]['#description_display'] = 'before';

	$language = $form['field_pop_selection_others_sp']['#language'];	
	$form['field_pop_selection_others_sp'][$language]['0']['#description_display'] = 'before';
	$form['field_pop_selection_others_sp'][$language]['0']['value']['#description_display'] = 'before';
	$form['field_pop_selection_others_sp'][$language]['#description_display'] = 'before';

	$language = $form['field_pop_specific_pop_other_sp']['#language'];	
	$form['field_pop_specific_pop_other_sp'][$language]['0']['#description_display'] = 'before';
	$form['field_pop_specific_pop_other_sp'][$language]['0']['value']['#description_display'] = 'before';
	$form['field_pop_specific_pop_other_sp'][$language]['#description_display'] = 'before';

	$language = $form['field_pop_recruitment_other']['#language'];
	$form['field_pop_recruitment_other'][$language]['0']['#description_display'] = 'before';
	$form['field_pop_recruitment_other'][$language]['0']['value']['#description_display'] = 'before';
	$form['field_pop_recruitment_other'][$language]['#description_display'] = 'before';	

    // $form['actions']['_interconnect_studies_save_add_pop_submit'] = array(
		// '#access' => TRUE,
		// '#value' => t('Save & Add Another Sampling Frame'),
		// '#weight' => 6,
		// '#type' => 'submit',
		// '#submit' => array('node_form_submit', '_interconnect_studies_save_add_pop_submit'),
	// );
  	$form['actions']['preview']['#type']='hidden';
	$form['actions']['_mica_studies_save_add_dce_submit']['#type']='hidden';
	$language = $form['field_pop_locality_ic']['#language'];  
	unset($form['field_pop_locality_ic'][$language]['#options']['_none']);
	$form['field_pop_locality_ic'][$language]['#options']['_none'] = 'N/A';
	
}

//function to remove the additional clutter for the long text fields
function remove_text_format(&$form) {
  $language = $form['#language'];
  unset($form[$language][0]['format']);
  $form[$language][0]['#rows'] = 1;
  $form[$language][0]['value']['#rows'] = 1;
  return $form;
}

function interconnect_studies_node_view_alter(&$build){
		// hack because conditional fields don't format correctly in render array (other recruitment sources)
	// this is a Mica issue see line 304 in mica_studies.population.inc
	  if (isset($build['field_pop_recruitment_other'])) {
		$correct_val = $build['field_pop_recruitment_other'][0]['#markup'];
		$end = end($build['field_pop_src_recruit']);
		$key = key($build['field_pop_src_recruit']);
		$build['field_pop_src_recruit'][$key]['#markup'] = '<div class="inner-label">Other Source:</div><div class="inner-value">' . $correct_val .'</div>';
	  }
	  
	  //This removes the non-InterConnect fields on the view population page
	    if($build['#bundle'] != 'page'){
			_node_unset($build,'body');
		}
		_node_unset($build,'field_pop_dce');
		_node_unset($build,'data-collection-event');
		_node_unset($build,'field_pop_ethnic_origin');
		_node_unset($build,'field_pop_exist_study_part');
		_node_unset($build,'field_pop_gender');
		_node_unset($build,'field_pop_general_pop_recruit');
		_node_unset($build,'field_pop_no_lim_participants_s');
		_node_unset($build,'field_pop_no_limits_participants');
		_node_unset($build,'field_pop_partcipant_sel_supp_in');
		_node_unset($build,'field_pop_participants_nb');
		_node_unset($build,'field_pop_participants_nb_s');
		_node_unset($build,'field_pop_participants_nb_supp_i');
		_node_unset($build,'field_pop_recruit_supp_info');
		_node_unset($build,'field_pop_study');
		_node_unset($build,'field_pop_supp_infos');
		_node_unset($build,'field_pop_territory');
		
		//undo existing pop_selection_criteria
		if (isset($build['field_pop_select_criteria']['#items'])){
			foreach($build['field_pop_select_criteria']['#items'] as $key => $value){
				unset($build['field_pop_select_criteria'][$key]);
				unset($build['field_pop_select_criteria']['#items'][$key]);
			}
		}
		
		//reinstate pop_selection_criteria, borrowing code from mica_studies.population.inc
		// node->content has been replaced with $build
		
		$index = 0;
		
		if (isset($build['field_pop_gender_ic'])) {
			$build['field_pop_gender_ic']['#access'] = FALSE;
			$build['field_pop_select_criteria']['#items'][$index] = $build['field_pop_gender_ic']['#items'][0];
			$label_value = t('Gender');
			$markup = $build['field_pop_gender_ic'][0]['#markup'];
			$build['field_pop_select_criteria'][$index]['#markup'] = "<div class='inner-label'>$label_value:</div>"
			  . "<div class='inner-value'>$markup</div>";
		}
		
		
		if (isset($build['field_pop_age_min']) || isset($build['field_pop_age_max'])) {
			$index = count($build['field_pop_select_criteria']['#items']);

			if(isset($build['field_pop_age_min']['#items']['0']['value'])){
				$age_min = $build['field_pop_age_min']['#items']['0']['value'];
			}
			if(isset($build['field_pop_age_max']['#items']['0']['value'])){
				$age_max = $build['field_pop_age_max']['#items']['0']['value'];
			}
			if (!empty($age_min) || !empty($age_max)) {
			  $age_items = array();
			  $age_markup = '';
			  if (!empty($age_min)) {
				$age_items['age_min'] = $build['field_pop_age_min']['#items'][0];
				$age_markup .= t('minimum') . ' ' . $build['field_pop_age_min'][0]['#markup'];
			  }
			  if (!empty($age_max)) {
				if (!empty($age_min)) {
				  $age_markup .= ', ';
				}
				$age_items['age_max'] = $build['field_pop_age_max']['#items'][0];
				$age_markup .= t('maximum') . ' ' . $build['field_pop_age_max'][0]['#markup'];
			  }
			  $build['field_pop_select_criteria']['#items'][$index] = $age_items;
			  $label_value = t('Age');
			  $markup = ucfirst($age_markup);
			  $build['field_pop_select_criteria'][$index]['#markup'] = "<div class='inner-label'>$label_value:</div>"
				. "<div class='inner-value'>$markup</div>";
			}
		}
		
		_interconnect_studies_population_view_selection_criteria_item($build, 'field_pop_country', t('Country'), t('Countries'));
		_interconnect_studies_population_view_selection_criteria_item($build, 'field_pop_locality_ic', t('Area of residence'));
		_interconnect_studies_population_view_selection_criteria_item($build, 'field_pop_pregnancy_ic', t('Pregnant women'));
		_interconnect_studies_population_view_selection_criteria_item($build, 'field_pop_newborn_ic', t('Newborn'));
		_interconnect_studies_population_view_selection_criteria_item($build, 'field_pop_migration_ic', t('Migration status'));
		_interconnect_studies_population_view_selection_criteria_item($build, 'field_pop_selection_others_sp', t('Other selection criteria'));
		_interconnect_studies_population_view_selection_criteria_item($build, 'field_pop_health_status', t('Selection on the basis of a specific pre-existing health condition'));

}

function _node_unset(&$build,$field){
		if (isset($build[$field])) {
		unset($build[$field]);
	  }
}

function _interconnect_studies_population_view_selection_criteria_item(&$build, $field, $label, $label_plural = NULL) {
  if (!isset($build[$field])) {
    return;
  }
  $nb_items = count($build[$field]['#items']);
  if ($nb_items > 0 ) {
    $index = count($build['field_pop_select_criteria']['#items']);
    $build['field_pop_select_criteria']['#items'][$index] = $build[$field]['#items'];
    $markup = '<div class="inner-value">';
    for ($i = 0; $i < $nb_items; $i++) {
      $markup .= isset($build[$field][$i]['#markup']) ? $build[$field][$i]['#markup'] : '';
      if ($i < $nb_items - 1) {
        $markup .= ', ';
      }
    }
    $markup .= '</div>';

    $build['field_pop_select_criteria'][$index]['#markup'] = '<div class="inner-label">'
      . t('@label', array('@label' => $nb_items > 1 && strlen($label_plural) > 0 ? $label_plural : $label)) . ':</div>'
      . $markup;
    $build[$field]['#access'] = FALSE;
  }
}


//function to run when pressing save button for study - stay on the same page after save
function _interconnect_studies_save_study_submit($form, &$form_state) {
	
	if (isset($form['actions']['_interconnect_studies_save_study_submit'])) {
		$form_state['redirect'] = 'node/'.$form_state['nid'].'/edit';
		$form_state['nid'] = NULL;
	}
	
}

//function to run when pressing save and add population button
//this doesn't work when you have come to the page via the Add Population link (but this is Mica defect)
function _interconnect_studies_save_add_pop_submit($form, &$form_state) {

	$wrapper = entity_metadata_wrapper('node', $form_state['nid']);
	$study_nid = $wrapper->field_pop_study->getIdentifier();
	
	if (isset($form['actions']['_interconnect_studies_save_add_pop_submit'])) {
	
		$form_state['redirect'] = array(
			'node/add/population',
			array(
				'query' => array(
					'study' => $study_nid,
					//'destination' => 'node/'.$study_nid,
					//'study' => $form_state['nid'],
				),
			),
		);
		$form_state['nid'] = NULL;
	}
}

/**
 * Implements hook_block_info().
 */
function interconnect_studies_block_info() {
  $pages = "<?php if(arg(0) == 'node' && is_numeric(arg(1)) && ((arg(2) == ''|| arg(2) == 'view' || arg(2) == 'draft'))) return TRUE; ?>";
  return array(
    'study-general-info-ic' => array(
      'info' => t('Study General Information'),
      'weight' => '10',
      'status' => TRUE,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_PHP,
      'pages' => $pages,
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
	'study-methods-ic' => array(
      'info' => t('Study Methods'),
      'weight' => '20',
      'status' => TRUE,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_PHP,
      'pages' => $pages,
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
	'study-ethnicity-ic' => array(
      'info' => t('Study Race and Ethnicity Information'),
      'weight' => '30',
      'status' => TRUE,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_PHP,
      'pages' => $pages,
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
	'study-available-info-ic' => array(
      'info' => t('Available information'),
      'weight' => '40',
      'status' => TRUE,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_PHP,
      'pages' => $pages,
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
	'study-populations-ic' => array(
      'info' => t('Study Populations'),
      'weight' => '50',
      'status' => TRUE,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_PHP,
      'pages' => $pages,
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
	'europe-ic' => array(
      'info' => t('Europe'),
      'weight' => '1',
      'status' => TRUE,
      'region' => 'footer',
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => '<front>',
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
  );
}

/**
 * Implements hook_block_list_alter().
 */

// function to remove Mica blocks from study page
function interconnect_studies_block_list_alter(&$blocks) {
	foreach ($blocks as $key => $block) {

		if ($block->module == 'mica_studies') {
			unset($blocks[$key]);
		}
	}
}

/**
 * Implements hook_block_view().
 */
 function interconnect_studies_block_view($delta = '') {
	module_load_include('inc', 'interconnect_studies', 'interconnect_studies.blocks');
	$study = menu_get_object();

	drupal_add_css(drupal_get_path('module', 'interconnect_studies') . '/css/custom.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));

	$show_draft = (strpos(current_path(), '/draft') > 0 || $study->status == NODE_NOT_PUBLISHED);
	if ($show_draft) {
		$study = workbench_moderation_node_current_load($study);
	}
	if (empty($study)) {
		return NULL;
	}
	switch ($delta) {
		case 'study-general-info-ic':
		  return _interconnect_studies_block_study_general_info($study);
		case 'study-methods-ic':
		  return _interconnect_studies_block_study_methods($study);
		case 'study-ethnicity-ic':
		  return _interconnect_studies_block_study_ethnicity($study);
		case 'study-available-info-ic':
		  return _interconnect_studies_block_available_info($study);
		case 'study-populations-ic':
		  return _interconnect_studies_block_study_populations($study, $show_draft);
		case 'europe-ic':
		  return _interconnect_studies_block_europe();
		default:
		   return NULL;
	}
}


 function _interconnect_studies_validate($form, $form_state) {
	
	_mica_studies_form_validate_field($form, $form_state, 'field_design_ic', 'field_design_other_ic', 'other'); 
	_mica_studies_form_validate_field($form, $form_state, 'field_recruit_cont_ic', 'field_recruit_end_ic', '0');
	_mica_studies_form_validate_field($form, $form_state, 'field_family_ic', 'field_family_other_ic', 'other');
	_mica_studies_form_validate_field($form, $form_state, 'field_design_ic', 'field_interv_type_ic', 'clinical_trial');
	_mica_studies_form_validate_field($form, $form_state, 'field_design_ic', 'field_trial_number_ic', 'clinical_trial');  
	
	
	//Removed as no longer percentages
 
	// $language = $node['field_race_african_ic']['#language'];
	// $total = $node['field_race_african_ic'][$language]['0']['value']['#value'];
	// $language = $node['field_race_e_asian_ic']['#language'];
	// $total = $total + $node['field_race_e_asian_ic'][$language]['0']['value']['#value'];
	// $language = $node['field_race_s_asian_ic']['#language'];
	// $total = $total + $node['field_race_s_asian_ic'][$language]['0']['value']['#value'];
	// $language = $node['field_race_euro_ic']['#language'];
	// $total = $total + $node['field_race_euro_ic'][$language]['0']['value']['#value'];
	// $language = $node['field_race_indig_am_ic']['#language'];
	// $total = $total + $node['field_race_indig_am_ic'][$language]['0']['value']['#value'];
	// $language = $node['field_race_indig_aus_ic']['#language'];
	// $total = $total + $node['field_race_indig_aus_ic'][$language]['0']['value']['#value'];
	// $language = $node['field_race_indig_pac_ic']['#language'];
	// $total = $total + $node['field_race_indig_pac_ic'][$language]['0']['value']['#value'];
	// $language = $node['field_race_mid_e_ic']['#language'];
	// $total = $total + $node['field_race_mid_e_ic'][$language]['0']['value']['#value'];
	// $language = $node['field_race_other_ic']['#language'];
	// $total = $total + $node['field_race_other_ic'][$language]['0']['value']['#value'];		

	// if($total != 100){
		// $error_elements = array( 'field_race_african_ic', 'field_race_e_asian_ic', 'field_race_s_asian_ic',
		// 'field_race_euro_ic', 'field_race_indig_am_ic', 'field_race_indig_aus_ic', 'field_race_indig_pac_ic', 'field_race_mid_e_ic',
		// 'field_race_other_ic');
		// foreach ($error_elements as $element) {
			// form_set_error($element,'');
		// }
		// drupal_set_message(t('The fields in the participant characteristics section (i.e. excluding the field Hispanic or Latino
// participants) must sum to 100% '), 'error');

	// }
}

//function to add a dependency on two fields with an OR condition
function _mica_add_double_or_field_checked(&$form, $dependee1, $dependee2, $dependent, $key_selected1, $key_selected2) {
  if (array_key_exists($dependee1, $form) && array_key_exists($dependent, $form) && array_key_exists($dependee2, $form)) {
    $lang = $form[$dependee1]['#language'];
    $type = $form[$dependee1][$lang]['#type'];
    $input1 = ':input[name="' . $dependee1 . '[' . $lang . ']';
    $rule1 = array();
    if ($type != 'radios') {
		$input1 = $input1 . '[' . $key_selected1 . ']';
		$rule1['checked'] = TRUE;
    }
    else {
		$rule1['value'] = $key_selected1;
    }

    $lang = $form[$dependee2]['#language'];
    $type = $form[$dependee2][$lang]['#type'];
    $input2 = ':input[name="' . $dependee2 . '[' . $lang . ']';
    $rule2 = array();
    if ($type != 'radios') {
		$input2 = $input2 . '[' . $key_selected2 . ']';
		$rule2['checked'] = TRUE;
    }
    else {
		$rule2['value'] = $key_selected2;
    }

    $input1 = $input1 . '"]';
    $input2 = $input2 . '"]';
    $form[$dependent]['#states'] = array(
		'visible' => array(
        array($input1 => $rule1),
        array($input2 => $rule2),
		),
    );
  }
}

//old function for OR conditions if you can only use AND with NOT
function _double_simple(&$form, $dependee, $dependent, $options, $visible_options) {
	$lang = $form[$dependee]['#language'];
	$input = ':input[name="' . $dependee . '[' . $lang . ']"]';
	foreach (array_diff($options, $visible_options) as $i => $vocab) {
	$form[$dependent]['#states']['visible'][$input . ', my-nonsense-dummy-element-' . $i] =
		array('!value' => $vocab);

		}
}